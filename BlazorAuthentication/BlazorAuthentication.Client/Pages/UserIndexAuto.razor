@page "/userindexauto"
@rendermode InteractiveAuto
@* Auto, que é uma mescla entre o Server e o WebAssembly, as páginas ou componentes são servidas primariamente no modelo Server e depois WebAssembly *@
@attribute [StreamRendering(true)]
@* (SSR Streaming) Carrega a página em um primeiro momento e os dados depois. *@

@using BlazorAuthentication.Client.Model
@using BlazorAuthentication.Client.Service.Interface

@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject NotificationService NotificationService

@inject IUserService _userService

@* <CascadingAuthenticationState> *@
    <AuthorizeView>
        <Authorized>
            <div class="row">
                <h1 class="text-center">Lista de Usuários Auto</h1>
                <br />

                <hr style="border: none; background-color: rgba(0,0,0,.2); height: 1px; margin: 1rem 0; width: 100%; box-sizing: border-box;" />
                <br />

                <div class="filter-container d-flex align-items-center justify-content-end" style="gap: 15px;">
                    <RadzenButton Icon="add"
                                  Text="Novo Usuário"
                                  Style="width: auto; max-width: 100%; height: 40px; border-radius: 10px; padding: 10px 20px;"
                                  Click="OnUserCreate">
                    </RadzenButton>
                <button class="btn btn-primary" @onclick="(()=>Nav())">
                    Novo Usuário nav
                </button>
                </div>
                <br />
                <div class="d-flex flex-column gap-3">
                    <RadzenDataGrid @ref="grid"
                                    IsLoading=@isLoading
                                    Count="@count"
                                    Data="@UserList"
                                    LoadData="@LoadData"
                                    AllowSorting="false"
                                    AllowFiltering="false"
                                    AllowPaging="true"
                                    PageSize="Size"
                                    PagerHorizontalAlign="Radzen.HorizontalAlign.Center"
                                    TItem="UserProfileResponse"
                                    ColumnWidth="200px"
                                    EmptyText="Texto nao encontrado">
                        <Columns>
                            <RadzenDataGridColumn TItem="UserProfileResponse" TextAlign="Radzen.TextAlign.Center" Property="Name" Title="Nome" Width="160px" />
                            <RadzenDataGridColumn TItem="UserProfileResponse" TextAlign="Radzen.TextAlign.Center" Property="Email" Title="Email" Width="160px" />
                            <RadzenDataGridColumn TItem="UserProfileResponse" TextAlign="Radzen.TextAlign.Center" Property="UserName" Title="Usuários" Width="160px" />
                            <RadzenDataGridColumn TItem="UserProfileResponse" TextAlign="Radzen.TextAlign.Center" Property="Registration" Title="Matrícula" Width="160px" />

                        </Columns>
                    </RadzenDataGrid>
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <Redirect />
        </NotAuthorized>
    </AuthorizeView>
@* </CascadingAuthenticationState> *@

@code {

    private int count;
    private List<UserProfileResponse> UserList = new();
    private RadzenDataGrid<UserProfileResponse> grid;


    private string? selectedRole = null;

    private bool isLoading = true;
    private int Size = 5;
    private int CurrentPage = 1;

    private string? filterName = null;
    private string? filterUsername = null;
    private string? filterEmail = null;
    private string? filterRegistration = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            try
            {
                await base.OnInitializedAsync();
                await GetUser(new UserPage { Page = 1, Size = Size, Sort = "", Direction = 1 });

            }
            finally
            {
                isLoading = false;
            }
            StateHasChanged();
        }
    }
    private async Task GetUser(UserPage request)
    {
        request.Email = filterEmail;
        request.Search = filterUsername;
        request.Name = filterName;
        request.Registration = filterRegistration;
        request.Role = selectedRole;


        var result = await _userService.GetListUser(request);


        if (result.IsSuccess)
        {
            count = result.Data.TotalElements;
            UserList = result.Data.Content;
            StateHasChanged();
        }
        else if (result.Errors is not null)
        {
            foreach (var error in result.Errors)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = Summary.Error,
                        Detail = error,
                        Duration = 4000
                    });
            }
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = Summary.Error,
                    Detail = "Erro ao carregar as informações",
                    Duration = 4000
                });
        }
    }

    private void Nav()
    {
        NavigationManager.NavigateTo("CreateUser");
    }

    private async Task LoadData(LoadDataArgs args)
    {
        CurrentPage = ((int)args.Skip / (int)args.Top) + 1;
        UserPage userPage = new UserPage
            {
                Page = CurrentPage,
                Size = (int)args.Top,
                Sort = args.OrderBy,
            };

        await GetUser(userPage);
    }

    private async void Search()
    {
        if (CurrentPage == 1) await grid.Reload();
        else await grid.FirstPage();
    }

    public async Task OnUserCreate()
    {


        var dialogResult = await DialogService.OpenAsync<CreateUser>("Novo Usuário", null,
                                                   new DialogOptions()
                                                       {
                                                           Width = ModalState.Medium,
                                                           CloseDialogOnEsc = ModalState.CloseDialogOnEsc,
                                                           Draggable = ModalState.Draggable,
                                                           Resizable = ModalState.Resizable,
                                                           Height = "76%",
                                                           ShowClose = ModalState.ShowClose
                                                       });
        if (dialogResult is not null)
        {
            await grid.Reload();
        }
    }

}

