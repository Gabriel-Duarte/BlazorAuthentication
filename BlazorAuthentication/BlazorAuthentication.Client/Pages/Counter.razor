@page "/counter"
@rendermode InteractiveAuto
@using BlazorAuthentication.Client.Model
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DialogService DialogService
<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<CascadingAuthenticationState>
<AuthorizeView>
    <Authorized>
        <p>Welcome, @username!</p>
    </Authorized>
    <NotAuthorized>
        <p>You are not logged in.</p>
    </NotAuthorized>
</AuthorizeView>
</CascadingAuthenticationState>
<RadzenIcon Icon="assessment" Style="font-size: 24px;cursor: pointer; display: inline-block;" @onclick="OnConformidades" />
@code {
    private int currentCount = 0;
    private string username;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var uniqueNameClaim = user.Claims.FirstOrDefault(c => c.Type == "unique_name");

            if (uniqueNameClaim != null)
            {
                username = uniqueNameClaim.Value;
                StateHasChanged();
            }
        }
    }
    List<Conformidades> conformidades = new List<Conformidades>
    {
      new Conformidades { Day = "10/03", Fornecedor = 19, Contagem = 14 },
      new Conformidades { Day = "11/03", Fornecedor = 12, Contagem = 18 },
      new Conformidades { Day = "12/03", Fornecedor = 9, Contagem = 23 },
      new Conformidades { Day = "13/03", Fornecedor = 15, Contagem = 15 },
      new Conformidades { Day = "14/03", Fornecedor = 10, Contagem = 5 },
      new Conformidades { Day = "15/03", Fornecedor = 4, Contagem = 29 },
    };
    public async Task OnConformidades()
    {
        var parameter = new Dictionary<string, object>() {
                { "conformidades", conformidades } };

        var dialogResult = await DialogService.OpenAsync<DashboardModal>("Painel de Não Conformidades", parameter,
                                                   new DialogOptions()
                                                       {
                                                           Width = ModalState.Medium,
                                                           CloseDialogOnEsc = ModalState.CloseDialogOnEsc,
                                                           Draggable = ModalState.Draggable,
                                                           Resizable = ModalState.Resizable,
                                                           Height = "53%",
                                                           ShowClose = ModalState.ShowClose
                                                       });

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // var user = authState.User;

        // if (user.Identity.IsAuthenticated)
        // {
        //     var uniqueNameClaim = user.Claims.FirstOrDefault(c => c.Type == "unique_name");

        //     if (uniqueNameClaim != null)
        //     {
        //         username = uniqueNameClaim.Value;
        //         StateHasChanged();
        //     }
        // }
    }

    private void IncrementCount()
    {
        currentCount++;
    }
}
