@page "/counter2"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<CascadingAuthenticationState>
<AuthorizeView>
    <Authorized>
        <p>Welcome, @username!</p>
    </Authorized>
    <NotAuthorized>
        <p>You are not logged in.</p>
    </NotAuthorized>
</AuthorizeView>
</CascadingAuthenticationState>
@code {
    private int currentCount = 0;
    private string username;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var uniqueNameClaim = user.Claims.FirstOrDefault(c => c.Type == "unique_name");

            if (uniqueNameClaim != null)
            {
                username = uniqueNameClaim.Value;
                StateHasChanged();
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // var user = authState.User;

        // if (user.Identity.IsAuthenticated)
        // {
        //     var uniqueNameClaim = user.Claims.FirstOrDefault(c => c.Type == "unique_name");

        //     if (uniqueNameClaim != null)
        //     {
        //         username = uniqueNameClaim.Value;
        //         StateHasChanged();
        //     }
        // }
    }

    private void IncrementCount()
    {
        currentCount++;
    }
}
