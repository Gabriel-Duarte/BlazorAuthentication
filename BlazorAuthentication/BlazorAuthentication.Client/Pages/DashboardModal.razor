@page "/teste"
@rendermode InteractiveAuto
@using BlazorAuthentication.Client.Model
@inject IJSRuntime JSRuntime
@inject DialogService DialogService

<RadzenCard>
    <RadzenChart>
        <RadzenValueAxis Min="0">
        </RadzenValueAxis>
        <RadzenColumnSeries Data=@conformidade CategoryProperty="Day" Title="Fornecedor" ValueProperty="Fornecedor" Fill="orange" />
        <RadzenColumnSeries Data=@conformidade CategoryProperty="Day" Title="Contagem" ValueProperty="Contagem" Fill="blue" />
        <RadzenColumnOptions Radius="5" />
    </RadzenChart>
</RadzenCard>

<RadzenButton Variant="Variant.Flat"
              ButtonStyle="ButtonStyle.Light"
              Shade="Shade.Lighter"
              Icon="keyboard_return"
              Text="Voltar"
              Style="margin-left: auto; width: auto; max-width: 100%; height: 40px; padding: 10px 20px; border-radius: 10px; margin-top: 20px;"
              Click="@Exit" />

@code {
    [Parameter]
    public List<Conformidades> conformidades { get; set; }
    private List<Conformidades> conformidade = new List<Conformidades>();

    private DotNetObjectReference<DashboardModal> _objRef;
    private bool _isDisposed;

    protected override void OnInitialized()
    {
        conformidade = new List<Conformidades>
        {
            new Conformidades { Day = "10/03", Fornecedor = 19, Contagem = 14 },
            new Conformidades { Day = "11/03", Fornecedor = 12, Contagem = 18 },
            new Conformidades { Day = "12/03", Fornecedor = 9, Contagem = 23 },
            new Conformidades { Day = "13/03", Fornecedor = 15, Contagem = 15 },
            new Conformidades { Day = "14/03", Fornecedor = 10, Contagem = 5 },
            new Conformidades { Day = "15/03", Fornecedor = 4, Contagem = 29 },
        };

        _objRef = DotNetObjectReference.Create(this);
        JSRuntime.InvokeVoidAsync("registerDotNetObject", _objRef);
    }

    private void Exit()
    {
        DialogService.Dispose();
        DialogService.Close(null);
    }

    public async ValueTask DisposeAsync()
    {
        if (!_isDisposed)
        {
            if (_objRef != null)
            {
                await JSRuntime.InvokeVoidAsync("unregisterDotNetObject", _objRef);
                _objRef.Dispose();
            }

            _isDisposed = true;
        }
    }

    ~DashboardModal()
    {
        Dispose(false);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (!_isDisposed)
        {
            if (disposing)
            {
                // liberar recursos gerenciados
            }

            // liberar recursos não gerenciados
            if (_objRef != null)
            {
                _objRef.Dispose();
            }

            _isDisposed = true;
        }
    }
}
